# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/'
pathMesh = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


def createScene(rootNode):

                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")
                rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')

                point = rootNode.createChild('point')
                point.createObject('EulerImplicit', firstOrder='1')
                point.createObject('CGLinearSolver', iterations='100', tolerance="1e-5", threshold="1e-5")
                point.createObject('MechanicalObject', template="Rigid3d",
                        position='0 0 0 0 0 0 1',
                        showObject="1",
                        showObjectScale=".1",
                        drawMode="1",
                        showColor="255 255 255 255")
                ## The AnimationEditor takes multiple options
                # template : should be the same as the mechanical you want to animate
                # filename : file in which the animation will be saved
                # load : set to true to load the animation at init (default is true)
                # loop : when the animation is playing, set this option to true to loop and start again the animation
                # dx : to control the animation in displacement instead of time
                # frameTime (default is 0.01)
                # drawTimeline (default is true)
                # drawTrajectory (default is true)
                # drawSize : coeff size of diplayed elements of trajectory
                point.createObject('AnimationEditor', name="animation",
                template="Rigid3d", filename=path+"RigidAnimation.txt",
                load="1",
                drawTimeline="1", drawTrajectory="1")

                visu = point.createChild('visu')
                visu.createObject('MeshObjLoader', name="loader", filename="mesh/cube.obj")
                visu.createObject('OglModel', src="@loader", filename="mesh/cube.obj")
                visu.createObject('RigidMapping')

                return rootNode
