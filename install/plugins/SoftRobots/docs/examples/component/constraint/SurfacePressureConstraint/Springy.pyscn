# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


def createScene(rootNode):

                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.createObject('VisualStyle', displayFlags="showVisualModels hideBehaviorModels hideCollisionModels \
                                        hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe")

                rootNode.createObject('FreeMotionAnimationLoop')

                rootNode.createObject('GenericConstraintSolver', maxIterations="1000", tolerance="1e-3")

                rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
                rootNode.findData('gravity').value="0 0 -981.0"
                rootNode.findData('dt').value=0.01


                ##########################################
                # FEM Model                              #
                ##########################################
                accordion = rootNode.createChild('accordion')
                accordion.createObject('EulerImplicit', firstOrder='0', rayleighStiffness="0.2", rayleighMass="0.2")
                accordion.createObject('SparseLDLSolver')

                accordion.createObject('MeshVTKLoader', name='loader', filename=path+'Springy.vtk', rotation="0 0 0")
                accordion.createObject('TetrahedronSetTopologyContainer', src='@loader')
                accordion.createObject('TetrahedronSetTopologyModifier')
                accordion.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
                accordion.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

                accordion.createObject('MechanicalObject', name='tetras', template='Vec3d')
                accordion.createObject('UniformMass', totalMass='0.030')
                accordion.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='500')

                accordion.createObject('BoxROI', name='ROI1', box='-2 -2 0 2 2 0.5', drawBoxes='true')
                accordion.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')
                # accordion.createObject('FixedConstraint', indices='@ROI1.indices')

                accordion.createObject('LinearSolverConstraintCorrection')


                ##########################################
                # Pressure                               #
                ##########################################
                #  This create a new node in the scene. This node is appended to the accordion's node.
		cavity = accordion.createChild('cavity')

		# This create a MechanicalObject, a componant holding the degree of freedom of our
		# mechanical modelling. In the case of a pneumatic actuation it is a set of positions describing the cavity wall.
		cavity.createObject('MeshSTLLoader', name='loader', filename=path+'Springy_Cavity.stl')
		cavity.createObject('Mesh', src='@loader', name='topo')
		cavity.createObject('MechanicalObject', name='cavity')

		# Create a SurfacePressureConstraint object with a name.
		cavity.createObject('SurfacePressureConstraint', template='Vec3d', name="pressure",
		    triangles='@topo.triangles',
		    valueType="1",
		    value="8")

		# This create a BarycentricMapping. A BarycentricMapping is a key element as it will create a bi-directional link
		# between the cavity wall (surfacic mesh) and the accordion (volumetric mesh) so that movements of the cavity's DoFs will be mapped
		# to the accordion and vice-versa;
		cavity.createObject('BarycentricMapping', name='mapping',  mapForces='false', mapMasses='false')

                ##########################################
                # Visualization                          #
                ##########################################
                accordionVisu = accordion.createChild('visu')
                accordionVisu.createObject('MeshSTLLoader', filename=path+"Springy.stl", name="loader")
                accordionVisu.createObject('OglModel', src="@loader", color="0.4 0.4 0.4 0.5")
                accordionVisu.createObject('BarycentricMapping')



                return rootNode
