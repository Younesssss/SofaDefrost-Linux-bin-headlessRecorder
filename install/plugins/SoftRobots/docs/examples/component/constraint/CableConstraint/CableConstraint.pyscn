# -*- coding: utf-8 -*-

import Sofa
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

from stlib.scene import Scene
# A prefab that implements an ElasticMaterialObject
from stlib.physics.deformable import ElasticMaterialObject

def createScene(rootNode):
	rootNode.createObject("RequiredPlugin", pluginName="SoftRobots")
	scene = Scene(rootNode, gravity=[0.0,-9810.0,0.0], dt=0.01)
	
	rootNode.createObject("FreeMotionAnimationLoop")
	rootNode.createObject("GenericConstraintSolver", maxIterations=1000, tolerance=0.001)

	finger = ElasticMaterialObject(rootNode, name="finger",
	                        volumeMeshFileName="mesh/finger.vtk",
	                        poissonRatio=0.45,
	                        youngModulus=600,
	                        totalMass=0.05)

	# To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
	# The idea is that ROI component "select" all DoFS that are enclosed by their "region".
	# We use ROI here to select a group of finger's DoFs that will be constrained to stay
	# at a fixed position.
	# You can either use "BoxROI"...
	finger.createObject('BoxROI', name='ROI1', box='-15 0 0 5 10 15', drawBoxes='true')
	# Or "SphereROI"...
	#finger.createObject('SphereROI', name='ROI', centers='0 0 0', radii='5')

	# RestShapeSpringsForceField is one way in Sofa to implement fixed point constraint.
	# Here the constraints are applied to the DoFs selected by the previously defined BoxROI
	finger.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')

	finger.createObject('LinearSolverConstraintCorrection')


	##########################################
	# Cable                                  #
	##########################################

	#  This create a new node in the scene. This node is appended to the finger's node.
	cable = finger.createChild('cable')

	# This create a MechanicalObject, a componant holding the degree of freedom of our
	# mechanical modelling. In the case of a cable it is a set of positions specifying
	# the points where the cable is passing by.
	cable.createObject('MechanicalObject',
			position=(
					"-17.5 12.5 2.5 " +
					"-32.5 12.5 2.5 " +
					"-47.5 12.5 2.5 " +
					"-62.5 12.5 2.5 " +
					"-77.5 12.5 2.5 " +

					"-83.5 12.5 4.5 " +
					"-85.5 12.5 6.5 " +
					"-85.5 12.5 8.5 " +
					"-83.5 12.5 10.5 " +

					"-77.5 12.5 12.5 " +
					"-62.5 12.5 12.5 " +
					"-47.5 12.5 12.5 " +
					"-32.5 12.5 12.5 " +
					"-17.5 12.5 12.5 " ))

	# Create a CableConstraint object with a name.
	# the indices are referring to the MechanicalObject's positions.
	# The last indice is where the pullPoint is connected.
	cable.createObject('CableConstraint', name="aCableActuator",
			indices="0 1 2 3 4 5 6 7 8 9 10 11 12 13",
			pullPoint="0.0 12.5 2.5")

	# This create a BarycentricMapping. A BarycentricMapping is a key element as it will create a bi-directional link
	# between the cable's DoFs and the finger's ones so that movements of the cable's DoFs will be mapped
	# to the finger and vice-versa;
	cable.createObject('BarycentricMapping')

	# This create a PythonScriptController that permits to programatically implement new behavior
	# or interactions using the Python programming langage. The controller is referring to a
	# file named "controller.py".
	cable.createObject('PythonScriptController', filename="controller/FingerController.py", classname="controller")

	##########################################
	# Visualization                          #
	##########################################
	# In Sofa, visualization is handled by adding a rendering model.
	# Create an empty child node to store this rendering model.
	fingerVisu = finger.createChild('visu')

	# Add to this empty node a rendering model made of triangles and loaded from an stl file.
	fingerVisu.createObject('MeshSTLLoader', filename=path+"finger.stl", name="loader")
	fingerVisu.createObject('OglModel', src="@loader", template='ExtVec3f', color="0.0 0.7 0.7")

	# Add a BarycentricMapping to deform the rendering model in a way that follow the ones of the parent mechanical model.
	fingerVisu.createObject('BarycentricMapping')

	return rootNode
